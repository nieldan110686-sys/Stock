<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistem Penyimpanan Item</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-pink: #ff6b9d;
            --secondary-pink: #feca57;
            --dark-pink: #c44569;
            --light-pink: #ffeaa7;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(120deg, #f093fb 0%, #f5576c 100%);
            min-height: 100vh;
            position: relative;
            overflow-x: hidden;
        }

        /* Aurora Background Effect */
        .aurora-bg {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
            background: linear-gradient(135deg, rgba(255, 0, 150, 0.3), rgba(0, 255, 255, 0.3));
            filter: blur(40px);
            opacity: 0.7;
        }

        .aurora-1 {
            position: absolute;
            width: 600px;
            height: 600px;
            background: radial-gradient(circle, rgba(255, 0, 150, 0.4) 0%, rgba(255, 0, 150, 0) 70%);
            border-radius: 50%;
            top: -200px;
            right: -200px;
            animation: aurora 15s infinite alternate;
        }

        .aurora-2 {
            position: absolute;
            width: 800px;
            height: 800px;
            background: radial-gradient(circle, rgba(0, 255, 255, 0.4) 0%, rgba(0, 255, 255, 0) 70%);
            border-radius: 50%;
            bottom: -300px;
            left: -300px;
            animation: aurora 20s infinite alternate-reverse;
        }

        @keyframes aurora {
            0% {
                transform: rotate(0deg) scale(1);
                opacity: 0.7;
            }
            50% {
                transform: rotate(180deg) scale(1.1);
                opacity: 0.5;
            }
            100% {
                transform: rotate(360deg) scale(1);
                opacity: 0.7;
            }
        }

        /* Glowing Text Effect */
        .glow-text {
            color: white;
            text-shadow: 0 0 10px #fff, 0 0 20px #fff, 0 0 30px var(--primary-pink), 
                         0 0 40px var(--primary-pink), 0 0 50px var(--primary-pink), 
                         0 0 60px var(--primary-pink), 0 0 70px var(--primary-pink);
            font-weight: bold;
            margin-bottom: 20px;
        }

        .container {
            position: relative;
            z-index: 1;
            padding-top: 30px;
        }

        .card {
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.85);
            margin-bottom: 30px;
            border: none;
        }

        .card-header {
            background: linear-gradient(90deg, var(--primary-pink), var(--secondary-pink));
            color: white;
            border-radius: 15px 15px 0 0 !important;
            font-weight: bold;
            padding: 15px 20px;
        }

        .table {
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 10px;
            overflow: hidden;
        }

        .table thead {
            background-color: var(--primary-pink);
            color: white;
        }

        .table tbody tr:nth-child(even) {
            background-color: rgba(255, 182, 193, 0.3);
        }

        .table tbody tr:hover {
            background-color: rgba(255, 182, 193, 0.5);
            transform: scale(1.01);
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(90deg, var(--primary-pink), var(--dark-pink));
            border: none;
            border-radius: 20px;
            padding: 8px 20px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .btn-success {
            background: linear-gradient(90deg, #00d2d3, #01a3a4);
            border: none;
            border-radius: 20px;
            padding: 8px 20px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .btn-success:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .form-control, .form-select {
            border-radius: 10px;
            border: 1px solid #ddd;
            padding: 10px 15px;
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-pink);
            box-shadow: 0 0 0 0.25rem rgba(255, 107, 157, 0.25);
        }

        .timestamp {
            font-size: 0.85rem;
            color: #666;
            font-style: italic;
        }

        .toast-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
        }

        .toast {
            background-color: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        .loading-spinner {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .spinner-border {
            color: var(--primary-pink);
        }

        .action-buttons {
            display: flex;
            gap: 10px;
        }

        .action-buttons button {
            padding: 5px 10px;
            font-size: 0.9rem;
        }

        .stock-badge {
            font-weight: bold;
            padding: 5px 10px;
            border-radius: 15px;
        }

        .stock-high {
            background-color: #d4edda;
            color: #155724;
        }

        .stock-medium {
            background-color: #fff3cd;
            color: #856404;
        }

        .stock-low {
            background-color: #f8d7da;
            color: #721c24;
        }
    </style>
</head>
<body>
    <div class="aurora-bg">
        <div class="aurora-1"></div>
        <div class="aurora-2"></div>
    </div>

    <div class="container">
        <h1 class="text-center glow-text">Sistem Penyimpanan Item</h1>
        
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <i class="fas fa-boxes me-2"></i> Daftar Item
                    </div>
                    <div class="card-body">
                        <div class="loading-spinner" id="loadingSpinner">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Memuat data dari Google Sheet...</p>
                        </div>
                        <div class="table-responsive">
                            <table class="table table-hover" id="itemsTable">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Nama Item</th>
                                        <th>Stok</th>
                                        <th>Harga</th>
                                        <th>Aksi</th>
                                    </tr>
                                </thead>
                                <tbody id="itemsTableBody">
                                    <!-- Data akan dimuat dari Google Sheet -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <i class="fas fa-plus-circle me-2"></i> Tambah Stok Item
                    </div>
                    <div class="card-body">
                        <form id="addStockForm">
                            <div class="mb-3">
                                <label for="itemName" class="form-label">Nama Item</label>
                                <select class="form-select" id="itemName" required>
                                    <option value="" selected disabled>Pilih Item</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="stockAmount" class="form-label">Jumlah Stok</label>
                                <input type="number" class="form-control" id="stockAmount" min="1" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Tanggal & Waktu</label>
                                <div class="timestamp" id="addTimestamp"></div>
                            </div>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Tambah Stok
                            </button>
                        </form>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <i class="fas fa-shopping-cart me-2"></i> Jual Item
                    </div>
                    <div class="card-body">
                        <form id="sellItemForm">
                            <div class="mb-3">
                                <label for="sellItemName" class="form-label">Nama Item</label>
                                <select class="form-select" id="sellItemName" required>
                                    <option value="" selected disabled>Pilih Item</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="sellAmount" class="form-label">Jumlah</label>
                                <input type="number" class="form-control" id="sellAmount" min="1" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Tanggal & Waktu</label>
                                <div class="timestamp" id="sellTimestamp"></div>
                            </div>
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-cash-register me-2"></i>Jual Item
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <i class="fas fa-history me-2"></i> Riwayat Transaksi
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>ID Transaksi</th>
                                        <th>Tanggal & Waktu</th>
                                        <th>Jenis</th>
                                        <th>Nama Item</th>
                                        <th>Jumlah</th>
                                    </tr>
                                </thead>
                                <tbody id="transactionHistory">
                                    <!-- Riwayat transaksi akan ditampilkan di sini -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast-container">
        <div class="toast" id="notificationToast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Notifikasi</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body" id="toastMessage">
                <!-- Pesan notifikasi akan ditampilkan di sini -->
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Google Sheet ID
        const SHEET_ID = '1py5Ni_qmhBS07fCQak3qP-_JZD4Tj3tTNGF80jUqb_c';
        const API_KEY = 'AIzaSyA0t5n2h3J6K8L9Q0R7N8P5Q4S3T2U1V9W'; // Ganti dengan API key Anda
        const SHEET_NAME = 'Sheet1'; // Nama sheet Anda

        // Data items
        let itemsData = [];
        let transactionHistory = [];

        // Fungsi untuk mengambil data dari Google Sheets
        async function fetchSheetData() {
            document.getElementById('loadingSpinner').style.display = 'block';
            
            try {
                // Menggunakan Google Sheets API untuk mengambil data
                const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${SHEET_NAME}?key=${API_KEY}`;
                const response = await fetch(url);
                const data = await response.json();
                
                if (data.values && data.values.length > 0) {
                    // Mengubah data dari Google Sheets menjadi array objek
                    const headers = data.values[0];
                    itemsData = data.values.slice(1).map(row => {
                        const item = {};
                        headers.forEach((header, index) => {
                            item[header] = row[index] || '';
                        });
                        return item;
                    });
                    
                    // Memastikan setiap item memiliki ID
                    itemsData.forEach((item, index) => {
                        if (!item.ID) {
                            item.ID = `ITEM-${index + 1}`;
                        }
                    });
                    
                    // Memperbarui tabel dan dropdown
                    updateItemsTable();
                    updateItemDropdowns();
                } else {
                    // Jika tidak ada data, gunakan data contoh
                    useSampleData();
                }
            } catch (error) {
                console.error('Error fetching data from Google Sheets:', error);
                // Jika terjadi kesalahan, gunakan data contoh
                useSampleData();
            } finally {
                document.getElementById('loadingSpinner').style.display = 'none';
            }
        }

        // Fungsi untuk menggunakan data contoh jika tidak dapat mengambil data dari Google Sheets
        function useSampleData() {
            itemsData = [
                { ID: 'ITEM-1', Name: 'Laptop', Stock: 10, Price: 8000000 },
                { ID: 'ITEM-2', Name: 'Smartphone', Stock: 25, Price: 5000000 },
                { ID: 'ITEM-3', Name: 'Tablet', Stock: 15, Price: 3000000 },
                { ID: 'ITEM-4', Name: 'Headphone', Stock: 30, Price: 500000 },
                { ID: 'ITEM-5', Name: 'Smartwatch', Stock: 20, Price: 1500000 }
            ];
            
            updateItemsTable();
            updateItemDropdowns();
            showNotification('Menggunakan data contoh. Tidak dapat menghubungkan ke Google Sheets.', 'warning');
        }

        // Fungsi untuk memperbarui tabel items
        function updateItemsTable() {
            const tableBody = document.getElementById('itemsTableBody');
            tableBody.innerHTML = '';
            
            itemsData.forEach(item => {
                const row = document.createElement('tr');
                
                // Menentukan kelas badge stok berdasarkan jumlah
                let stockClass = 'stock-high';
                if (item.Stock < 10) {
                    stockClass = 'stock-low';
                } else if (item.Stock < 20) {
                    stockClass = 'stock-medium';
                }
                
                row.innerHTML = `
                    <td>${item.ID}</td>
                    <td>${item.Name}</td>
                    <td><span class="stock-badge ${stockClass}">${item.Stock}</span></td>
                    <td>Rp ${parseInt(item.Price).toLocaleString('id-ID')}</td>
                    <td>
                        <div class="action-buttons">
                            <button class="btn btn-sm btn-primary" onclick="quickAddStock('${item.ID}')">
                                <i class="fas fa-plus"></i>
                            </button>
                            <button class="btn btn-sm btn-success" onclick="quickSellItem('${item.ID}')">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });
        }

        // Fungsi untuk memperbarui dropdown item
        function updateItemDropdowns() {
            const addDropdown = document.getElementById('itemName');
            const sellDropdown = document.getElementById('sellItemName');
            
            // Kosongkan dropdown
            addDropdown.innerHTML = '<option value="" selected disabled>Pilih Item</option>';
            sellDropdown.innerHTML = '<option value="" selected disabled>Pilih Item</option>';
            
            // Tambahkan item ke dropdown
            itemsData.forEach(item => {
                const addOption = document.createElement('option');
                addOption.value = item.ID;
                addOption.textContent = item.Name;
                addDropdown.appendChild(addOption);
                
                const sellOption = document.createElement('option');
                sellOption.value = item.ID;
                sellOption.textContent = item.Name;
                sellDropdown.appendChild(sellOption);
            });
        }

        // Fungsi untuk menambah stok
        function addStock(itemId, amount) {
            const item = itemsData.find(i => i.ID === itemId);
            if (item) {
                item.Stock = parseInt(item.Stock) + parseInt(amount);
                updateItemsTable();
                
                // Tambahkan ke riwayat transaksi
                const transaction = {
                    id: `TRX-${Date.now()}`,
                    date: new Date().toLocaleString('id-ID'),
                    type: 'Penambahan Stok',
                    itemName: item.Name,
                    amount: amount
                };
                transactionHistory.unshift(transaction);
                updateTransactionHistory();
                
                showNotification(`Berhasil menambah ${amount} stok untuk ${item.Name}`, 'success');
            }
        }

        // Fungsi untuk menjual item
        function sellItem(itemId, amount) {
            const item = itemsData.find(i => i.ID === itemId);
            if (item) {
                if (parseInt(item.Stock) >= parseInt(amount)) {
                    item.Stock = parseInt(item.Stock) - parseInt(amount);
                    updateItemsTable();
                    
                    // Tambahkan ke riwayat transaksi
                    const transaction = {
                        id: `TRX-${Date.now()}`,
                        date: new Date().toLocaleString('id-ID'),
                        type: 'Penjualan',
                        itemName: item.Name,
                        amount: amount
                    };
                    transactionHistory.unshift(transaction);
                    updateTransactionHistory();
                    
                    showNotification(`Berhasil menjual ${amount} ${item.Name}`, 'success');
                } else {
                    showNotification(`Stok ${item.Name} tidak mencukupi. Stok tersedia: ${item.Stock}`, 'danger');
                }
            }
        }

        // Fungsi untuk menambah stok dengan cepat
        function quickAddStock(itemId) {
            const amount = prompt('Masukkan jumlah stok yang ingin ditambahkan:');
            if (amount && !isNaN(amount) && parseInt(amount) > 0) {
                addStock(itemId, amount);
            }
        }

        // Fungsi untuk menjual item dengan cepat
        function quickSellItem(itemId) {
            const amount = prompt('Masukkan jumlah item yang ingin dijual:');
            if (amount && !isNaN(amount) && parseInt(amount) > 0) {
                sellItem(itemId, amount);
            }
        }

        // Fungsi untuk memperbarui riwayat transaksi
        function updateTransactionHistory() {
            const historyBody = document.getElementById('transactionHistory');
            historyBody.innerHTML = '';
            
            // Tampilkan hanya 10 transaksi terbaru
            const recentTransactions = transactionHistory.slice(0, 10);
            
            if (recentTransactions.length === 0) {
                historyBody.innerHTML = '<tr><td colspan="5" class="text-center">Belum ada transaksi</td></tr>';
                return;
            }
            
            recentTransactions.forEach(transaction => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${transaction.id}</td>
                    <td>${transaction.date}</td>
                    <td>${transaction.type}</td>
                    <td>${transaction.itemName}</td>
                    <td>${transaction.amount}</td>
                `;
                historyBody.appendChild(row);
            });
        }

        // Fungsi untuk menampilkan notifikasi
        function showNotification(message, type = 'info') {
            const toastElement = document.getElementById('notificationToast');
            const toastMessage = document.getElementById('toastMessage');
            
            toastMessage.textContent = message;
            
            // Mengatur kelas berdasarkan jenis notifikasi
            toastElement.className = 'toast';
            if (type === 'success') {
                toastElement.classList.add('bg-success', 'text-white');
            } else if (type === 'danger') {
                toastElement.classList.add('bg-danger', 'text-white');
            } else if (type === 'warning') {
                toastElement.classList.add('bg-warning');
            }
            
            const toast = new bootstrap.Toast(toastElement);
            toast.show();
        }

        // Fungsi untuk memperbarui timestamp
        function updateTimestamps() {
            const now = new Date().toLocaleString('id-ID');
            document.getElementById('addTimestamp').textContent = now;
            document.getElementById('sellTimestamp').textContent = now;
        }

        // Event listener untuk form tambah stok
        document.getElementById('addStockForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const itemId = document.getElementById('itemName').value;
            const amount = document.getElementById('stockAmount').value;
            
            if (itemId && amount) {
                addStock(itemId, amount);
                this.reset();
                updateTimestamps();
            }
        });

        // Event listener untuk form jual item
        document.getElementById('sellItemForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const itemId = document.getElementById('sellItemName').value;
            const amount = document.getElementById('sellAmount').value;
            
            if (itemId && amount) {
                sellItem(itemId, amount);
                this.reset();
                updateTimestamps();
            }
        });

        // Inisialisasi halaman
        document.addEventListener('DOMContentLoaded', function() {
            fetchSheetData();
            updateTimestamps();
            
            // Perbarui timestamp setiap detik
            setInterval(updateTimestamps, 1000);
        });
    </script>
</body>
</html>
